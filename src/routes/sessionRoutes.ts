import express from "express";import { Request, Response } from "express";import { SessionStatus } from "@prisma/client";import {	getAllSessions,	updateSession,	deleteSession,	createSession,} from "../repositories/sessionRepository";const sessionRouter = express.Router();sessionRouter.get("/", async (req: Request, res: Response) => {	try {		const sessions = await getAllSessions();		res.status(200).json(sessions);	} catch (error) {		console.error("Error fetching sessions:", error);		res.status(500).json({ error: "Internal Server Error" });	}});//TODO : Make so we can't have a session which start at 00:00 - 06:00 and 18:00 - 00:00//TODO : Front or back => Make sure the session cost at list 10 bucks//TODO : Front or back => Make sure the session require at least 2 poeplesessionRouter.post("/", async (req: Request, res: Response) => {	try {		const {			theme,			duration,			startDate,			endDate,			price,			minimalClient,			status,		} = req.body;				const newSession = await createSession(			theme,			duration,			new Date(startDate),			new Date(endDate),			price,			minimalClient,			status as SessionStatus,		);				res.status(201).json(newSession);	} catch (error) {		console.error("Error creating session:", error);		res.status(500).json({ error: "Internal Server Error" });	}});sessionRouter.put("/:sessionId", async (req: Request, res: Response) => {	try {		const sessionId = req.params.sessionId;		const {			theme,			duration,			startDate,			endDate,			price,			minimalClient,			status,		} = req.body;				const updatedSession = await updateSession(			sessionId,			theme,			duration,			startDate ? new Date(startDate) : undefined,			endDate ? new Date(endDate) : undefined,			price,			minimalClient,			status as SessionStatus		);				if (updatedSession) {			res.status(200).json(updatedSession);		} else {			res.status(404).json({ error: "Session not found" });		}	} catch (error) {		console.error("Error updating session:", error);		res.status(500).json({ error: "Internal Server Error" });	}});sessionRouter.delete("/:sessionId", async (req: Request, res: Response) => {	try {		const sessionId = req.params.sessionId;				const deletedSession = await deleteSession(sessionId);				if (deletedSession) {			res.status(200).json({ message: "Session deleted successfully" });		} else {			res.status(404).json({ error: "Session not found" });		}	} catch (error) {		console.error("Error deleting session:", error);		res.status(500).json({ error: "Internal Server Error" });	}});export default sessionRouter;