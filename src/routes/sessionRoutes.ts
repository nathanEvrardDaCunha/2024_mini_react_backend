import express from "express";import { Request, Response } from "express";import { SessionStatus } from "@prisma/client";import {	getAllSessions,	deleteSession,	createSession, joinSession, getSessionStatus, updateSession,} from "../repositories/sessionRepository";const sessionRouter = express.Router();sessionRouter.get("/", async (req: Request, res: Response) => {	try {		const sessions = await getAllSessions();		res.status(200).json(sessions);	} catch (error) {		console.error("Error fetching sessions:", error);		res.status(500).json({ error: "Internal Server Error" });	}});sessionRouter.post("/", async (req: Request, res: Response) => {	try {		const {			theme,			duration,			startDate,			endDate,			price,			minimalClient,			status,		} = req.body;				const startDateTime = new Date(startDate);		const currentDateTime = new Date();		const oneMonthLater = new Date();		oneMonthLater.setMonth(currentDateTime.getMonth() + 1);				if (startDateTime < currentDateTime) {			return res.status(400).json({ error: "Sessions cannot be created in the past." });		}				if (startDateTime > oneMonthLater) {			return res.status(400).json({ error: "Sessions cannot be created more than one month in advance." });		}				const startHour = startDateTime.getHours();		if (startHour >= 0 && startHour < 4) {			return res.status(400).json({ error: "Sessions cannot start between 00:00 and 06:00." });		}		if (startHour >= 16 && startHour < 24) {			return res.status(400).json({ error: "Sessions cannot start between 18:00 and 00:00." });		}				const defaultPrice = 10;		const defaultMinimalClient = 2;		const sessionPrice = price >= defaultPrice ? price : defaultPrice;		const sessionMinimalClient = minimalClient >= defaultMinimalClient ? minimalClient : defaultMinimalClient;				const newSession = await createSession(			theme,			duration,			startDateTime,			new Date(endDate),			sessionPrice,			sessionMinimalClient,			status as SessionStatus,		);				res.status(201).json(newSession);	} catch (error) {		console.error("Error creating session:", error);		res.status(500).json({ error: "Internal Server Error" });	}});sessionRouter.delete("/:sessionId", async (req: Request, res: Response) => {	try {		const sessionId = req.params.sessionId;				const deletedSession = await deleteSession(sessionId);				if (deletedSession) {			res.status(200).json({ message: "Session deleted successfully" });		} else {			res.status(404).json({ error: "Session not found" });		}	} catch (error) {		console.error("Error deleting session:", error);		// @ts-ignore		if (error.message === 'Cannot delete a session with a group attached') {			// @ts-ignore			res.status(400).json({ error: error.message });		} else {			res.status(500).json({ error: "Internal Server Error" });		}	}});sessionRouter.post("/:sessionId/join", async (req: Request, res: Response) => {	try {		const sessionId = req.params.sessionId;		const { email, numberOfPeople } = req.body;				const group = await joinSession(sessionId, email, numberOfPeople);				res.status(201).json(group);	} catch (error) {		// @ts-ignore		if (error.message === 'Session not found') {			res.status(404).json({ error: "Session not found" });		} else {			console.error("Error joining session:", error);			res.status(500).json({ error: "Internal Server Error" });		}	}});sessionRouter.get("/:sessionId/status", async (req: Request, res: Response) => {	try {		const sessionId = req.params.sessionId;				const status = await getSessionStatus(sessionId);				res.json({ status });	} catch (error) {		// @ts-ignore		if (error.message === 'Session not found') {			res.status(404).json({ error: "Session not found" });		} else {			console.error("Error checking session status:", error);			res.status(500).json({ error: "Internal Server Error" });		}	}});sessionRouter.put('/:id', async (req, res) => {	try {		const { id } = req.params;		const { theme, duration, startDate, endDate, price, minimalClient, status } = req.body;				const startDateTime = new Date(startDate);		const currentDateTime = new Date();		const oneMonthLater = new Date();		oneMonthLater.setMonth(currentDateTime.getMonth() + 1);				if (startDateTime < currentDateTime) {			return res.status(400).json({ error: "Sessions cannot be updated to start in the past." });		}				if (startDateTime > oneMonthLater) {			return res.status(400).json({ error: "Sessions cannot be updated to start more than one month in advance." });		}				const startHour = startDateTime.getHours();		if (startHour >= 0 && startHour < 4) {			return res.status(400).json({ error: "Sessions cannot start between 00:00 and 06:00." });		}		if (startHour >= 16 && startHour < 24) {			return res.status(400).json({ error: "Sessions cannot start between 18:00 and 00:00." });		}				const defaultPrice = 10;		const defaultMinimalClient = 2;		const sessionPrice = price >= defaultPrice ? price : defaultPrice;		const sessionMinimalClient = minimalClient >= defaultMinimalClient ? minimalClient : defaultMinimalClient;				const updatedSession = await updateSession(			id,			theme,			duration,			startDateTime,			new Date(endDate),			sessionPrice,			sessionMinimalClient,			status as SessionStatus,		);				res.status(200).json(updatedSession);	} catch (error) {		console.error('Error updating session:', error);		// @ts-ignore		if (error.message === 'Cannot update a session with a group already signed in.') {			// @ts-ignore			res.status(400).json({ error: error.message });		} else {			res.status(400).json({ error: 'Error updating session' });		}	}});export default sessionRouter;