import { prisma } from "../index";import { Prisma } from "@prisma/client";import { SessionStatus } from "@prisma/client";export async function getAllSessions() {	try {		return await prisma.session.findMany();	} catch (error) {		console.error('Error fetching sessions:', error);		throw error;	}}export async function deleteSession(sessionId: string) {	try {		const session = await prisma.session.findUnique({			where: {				id: sessionId,			},			include: {				group: true,			},		});				if (!session) {			throw new Error('Session not found');		}				if (session.group) {			await prisma.group.delete({				where: {					id: session.group.id,				},			});		}				const deletedSession = await prisma.session.delete({			where: {				id: sessionId,			},		});				return deletedSession;	} catch (error) {		console.error('Error deleting session:', error);		throw error;	}}export async function createSession(	theme: string,	duration: number,	startDate: Date,	endDate: Date,	price: number,	minimalClient: number,	status: SessionStatus) {	try {		const createdSession = await prisma.session.create({			data: {				theme,				duration,				startDate,				endDate,				price,				minimalClient,				status,			},		});				return createdSession;	} catch (error) {		console.error('Error creating session:', error);		throw error;	}}export async function joinSession(sessionId: string, email: string, numberOfPeople: number) {	try {		// Check if the session exists		const session = await prisma.session.findUnique({			where: { id: sessionId },		});				if (!session) {			throw new Error('Session not found');		}				const group = await prisma.group.create({			data: {				email,				nbOfClient: numberOfPeople,				session: {					connect: { id: sessionId },				},			},		});		console.log("group created");		return group;	} catch (error) {		console.error('Error joining session:', error);		throw error;	}}