import { prisma } from "../index";import {Prisma} from "@prisma/client";export async function getAllEmployee() {	try {		return await prisma.employee.findMany();	} catch (error) {		console.error('Error fetching employee:', error);		throw error;	}}export async function registerEmployee(email: string, password: string, firstName: string, lastName: string) {	try {		return await prisma.employee.create({			data: {				email,				password,				firstName,				lastName,			},		});	} catch (error) {		console.error('Error registering employee:', error);		throw error;	}}export async function getUserById(userId: string) {	try {		return await prisma.employee.findUnique({			where: { id: userId },		});	} catch (error) {		console.error('Error fetching employee by ID:', error);		throw error;	}}export async function loginEmployee(email: string, password: string) {	try {		const employee = await prisma.employee.findUnique({			where: {				email,			},		});				if (employee && employee.password === password) {			return employee;		}				return null;	} catch (error) {		console.error('Error logging in employee:', error);		throw error;	}}export async function deleteByUserId(userId: string) {	try {		await prisma.employee.update({			where: {				id: userId,			},			data: {				session: {					set: [],				},			},		});				const deletedEmployee = await prisma.employee.delete({			where: {				id: userId,			},		});		return deletedEmployee;	} catch (error) {		console.error('Error deleting employee:', error);		throw error;	}}export async function patchByUserId(userId: string, email?: string, password?: string, firstName?: string, lastName?: string) {	try {		const data: Prisma.EmployeeUpdateInput = {};				if (email) data.email = email;		if (password) data.password = password;		if (firstName) data.firstName = firstName;		if (lastName) data.lastName = lastName;				const updatedEmployee = await prisma.employee.update({			where: {				id: userId,			},			data,		});		return updatedEmployee;	} catch (error) {		console.error('Error updating employee:', error);		throw error;	}}